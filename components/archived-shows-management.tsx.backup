"use client"

import { useState, useMemo, useEffect } from "react"
import { useAuth } from "@/lib/auth-context"
import { apiClient, Show } from "@/lib/api-client"
import { toast } from "sonner"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { getRankingInfo } from "@/lib/ranking-utils"
import {
  Plus,
  Edit,
  Eye,
  Radio,
  Trash2,
  Grid3X3,
  List,
  Download,
  Check,
  Upload,
  AlertCircle,
  CheckCircle,
  X,
  Loader2,
  ChevronLeft,
  ChevronRight,
  RotateCcw,
  MoreVertical,
  MoreHorizontal,
  AlertTriangle,
  ArrowUpDown,
  ArrowUp,
  ArrowDown,
  Archive,
} from "lucide-react"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import DeleteShowDialog from "@/components/delete-show-dialog"
import ShowViewDialog from "@/components/show-view-dialog"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog"
import { Checkbox } from "@/components/ui/checkbox"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"


// Extended Show interface with archive fields
interface ShowWithArchive extends Show {
  is_archived?: boolean;
  archived_at?: string;
  archived_by?: string;
}

export default function ArchivedShowsManagement() {
  const { user } = useAuth()
  const [archivedShows, setArchivedShows] = useState<ShowWithArchive[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [viewingShowIndex, setViewingShowIndex] = useState<number | null>(null)
  const [editingShow, setEditingShow] = useState<ShowWithArchive | null>(null)
  const [deletingShow, setDeletingShow] = useState<ShowWithArchive | null>(null)
  const [viewMode, setViewMode] = useState<"cards" | "list">("list")
  const [selectedShows, setSelectedShows] = useState<Set<string>>(new Set())
  const [isBulkDeleting, setIsBulkDeleting] = useState(false)
  const [showBulkDeleteConfirm, setShowBulkDeleteConfirm] = useState(false)
  const [isBulkUnarchiving, setIsBulkUnarchiving] = useState(false)
  const [showBulkUnarchiveConfirm, setShowBulkUnarchiveConfirm] = useState(false)
  const [showUnarchiveConfirm, setShowUnarchiveConfirm] = useState(false)
  const [showingUnarchiveShow, setShowingUnarchiveShow] = useState<ShowWithArchive | null>(null)

  // Sorting state
  type SortField = 'name' | 'show_type' | 'isRateCard' | 'standardSplit' | 'programmaticSplit' | 'ranking_category'
  type SortDirection = 'asc' | 'desc' | null
  const [sortField, setSortField] = useState<SortField | null>(null)
  const [sortDirection, setSortDirection] = useState<SortDirection>(null)

  // Pagination state
  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 10

  const fetchArchivedShows = async () => {
    try {
      setLoading(true)
      setError(null)
      const shows = await apiClient.getArchivedShows()
      setArchivedShows(shows || [])
    } catch (err) {
      console.error("ArchivedShows: Failed to fetch archived shows:", err)
      const errorMessage = err instanceof Error ? err.message : "Failed to fetch archived shows"
      
      // Check if it's a "not found" error (which might mean no archived shows exist)
      if (errorMessage.includes("not found") || errorMessage.includes("404")) {
        setArchivedShows([])
        setError(null) // Don't show error if no archived shows exist
      } else {
        setError(errorMessage)
      }
    } finally {
      setLoading(false)
    }
  }


  const handleViewShow = (show: ShowWithArchive) => {
    const index = archivedShows.findIndex((s) => s.id === show.id)
    if (index !== -1) {
      setViewingShowIndex(index)
    }
  }

  const handleEditShow = (show: ShowWithArchive) => {
    setEditingShow(show)
  }

  const handleDeleteShow = (show: ShowWithArchive) => {
    setDeletingShow(show)
  }

  const handleUnarchiveShow = (show: ShowWithArchive) => {
    setShowingUnarchiveShow(show)
    setShowUnarchiveConfirm(true)
  }

  const handleConfirmUnarchiveShow = async () => {
    if (!showingUnarchiveShow) return

    try {
      await apiClient.unarchiveShow(showingUnarchiveShow.id)
      await fetchArchivedShows()
      setSelectedShows(new Set())
      setShowUnarchiveConfirm(false)
      setShowingUnarchiveShow(null)
    } catch (error) {
      // Error handling is done in the API client
    }
  }

  const handleShowUpdated = async () => {
    setEditingShow(null)
    await fetchArchivedShows()
  }

  const handleShowDeleted = async () => {
    setDeletingShow(null)
    await fetchArchivedShows()
  }

  const handleSelectAll = () => {
    if (selectedShows.size === archivedShows.length) {
      setSelectedShows(new Set())
    } else {
      setSelectedShows(new Set(archivedShows.map((show) => show.id)))
    }
  }

  const handleSelectShow = (showId: string) => {
    const next = new Set(selectedShows)
    next.has(showId) ? next.delete(showId) : next.add(showId)
    setSelectedShows(next)
  }

  const handleBulkDelete = () => {
    setShowBulkDeleteConfirm(true)
  }

  const handleBulkUnarchive = () => {
    setShowBulkUnarchiveConfirm(true)
  }

  const handleConfirmBulkUnarchive = async () => {
    if (selectedShows.size === 0) return

    setIsBulkUnarchiving(true)
    try {
      const selectedShowIds = Array.from(selectedShows)
      
      // Use the new bulk unarchive API
      const result = await apiClient.bulkUnarchiveShows(selectedShowIds)
      
      // Clear selection after unarchiving
      setSelectedShows(new Set())
      
      // Show appropriate success/error message
      if (result.failed === 0) {
        toast.success(`Successfully unarchived all ${result.successful} selected shows!`)
      } else if (result.successful > 0) {
        toast.warning(`Unarchived ${result.successful} shows, ${result.failed} failed`)
      } else {
        toast.error(`Failed to unarchive any shows. ${result.message || 'Unknown error'}`)
      }

      // Refresh the shows list
      await fetchArchivedShows()
    } catch (error: any) {
      console.error("Bulk unarchive error:", error)
      toast.error(error.message || "Failed to unarchive shows")
    } finally {
      setIsBulkUnarchiving(false)
      setShowBulkUnarchiveConfirm(false)
    }
  }

  const handleConfirmBulkDelete = async () => {
    if (selectedShows.size === 0) return

    setIsBulkDeleting(true)
    try {
      const selectedShowIds = Array.from(selectedShows)
      
      // Use the new bulk delete API
      const result = await apiClient.bulkDeletePodcasts(selectedShowIds)
      
      // Clear selection after deletion
      setSelectedShows(new Set())
      
      // Show appropriate success/error message
      if (result.failed === 0) {
        toast.success(`Successfully deleted all ${result.successful} selected shows!`)
      } else if (result.successful > 0) {
        toast.warning(`Deleted ${result.successful} shows, ${result.failed} failed`)
      } else {
        toast.error(`Failed to delete any shows. ${result.errors.join(', ')}`)
      }

      // Refresh the shows list
      await fetchArchivedShows()
    } catch (error: any) {
      console.error("Bulk delete error:", error)
      toast.error(error.message || "Failed to delete shows")
    } finally {
      setIsBulkDeleting(false)
      setShowBulkDeleteConfirm(false)
    }
  }

  // Sorting logic
  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : sortDirection === 'desc' ? null : 'asc')
    } else {
      setSortField(field)
      setSortDirection('asc')
    }
  }

  const getSortIcon = (field: SortField) => {
    if (sortField !== field) return <ArrowUpDown className="h-4 w-4" />
    if (sortDirection === 'asc') return <ArrowUp className="h-4 w-4" />
    if (sortDirection === 'desc') return <ArrowDown className="h-4 w-4" />
    return <ArrowUpDown className="h-4 w-4" />
  }


  // Pagination
  const totalPages = Math.ceil(archivedShows.length / itemsPerPage)
  const startIndex = (currentPage - 1) * itemsPerPage
  const endIndex = startIndex + itemsPerPage
  const paginatedShows = archivedShows.slice(startIndex, endIndex)

  const pageRangeStart = startIndex + 1
  const pageRangeEnd = Math.min(endIndex, archivedShows.length)

  const gotoPage = (page: number) => {
    setCurrentPage(Math.max(1, Math.min(page, totalPages)))
  }

  const gotoPrev = () => {
    setCurrentPage(Math.max(1, currentPage - 1))
  }

  const gotoNext = () => {
    setCurrentPage(Math.min(totalPages, currentPage + 1))
  }

  const handleNavigate = (direction: 'prev' | 'next') => {
    if (direction === 'prev' && viewingShowIndex !== null && viewingShowIndex > 0) {
      setViewingShowIndex(viewingShowIndex - 1)
    } else if (direction === 'next' && viewingShowIndex !== null && viewingShowIndex < archivedShows.length - 1) {
      setViewingShowIndex(viewingShowIndex + 1)
    }
  }

  const handleNavigateDialog = (direction: 'next' | 'previous') => {
    if (direction === 'previous' && viewingShowIndex !== null && viewingShowIndex > 0) {
      setViewingShowIndex(viewingShowIndex - 1)
    } else if (direction === 'next' && viewingShowIndex !== null && viewingShowIndex < archivedShows.length - 1) {
      setViewingShowIndex(viewingShowIndex + 1)
    }
  }

  const viewingShow = viewingShowIndex !== null ? archivedShows[viewingShowIndex] : null

  useEffect(() => {
    fetchArchivedShows()
  }, [])

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-emerald-600 to-cyan-600 bg-clip-text text-transparent tracking-tight">
              Archived Shows
            </h1>
            <p className="text-muted-foreground">Loading archived shows...</p>
          </div>
        </div>
        <Card>
          <CardContent className="text-center py-12">
            <Loader2 className="h-12 w-12 text-muted-foreground mx-auto mb-4 animate-spin" />
            <h3 className="text-lg font-medium mb-2">Loading Archived Shows</h3>
            <p className="text-muted-foreground">Please wait while we fetch your archived shows...</p>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (error) {
    return (
      <div className="space-y-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-emerald-600 to-cyan-600 bg-clip-text text-transparent">
              Archived Shows
            </h1>
            <p className="text-muted-foreground">Error loading archived shows</p>
          </div>
        </div>
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            <div className="font-medium mb-1">Failed to load archived shows</div>
            <p className="text-sm">{error}</p>
            <Button
              variant="outline"
              size="sm"
              className="mt-2 bg-transparent"
              onClick={() => fetchArchivedShows()}
            >
              Try Again
            </Button>
          </AlertDescription>
        </Alert>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold bg-gradient-to-r from-emerald-600 to-cyan-600 bg-clip-text text-transparent">
            Archived Shows
          </h1>
          <p className="text-muted-foreground">
            Manage shows that have been archived
          </p>
        </div>
        <div className="flex items-center gap-3">
          <Badge variant="secondary" className="text-sm">
            {archivedShows.length} archived shows
          </Badge>
        </div>
      </div>



      {/* Shows Display */}
      <div className="-mt-2">
      {viewMode === "cards" ? (
        <Card>
          <CardContent className="p-6">
            {/* TOP TOOLBAR: Selection (left) + Pagination (right) */}
            {archivedShows.length > 0 && (
              <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between pb-4 rounded-lg mb-2">
                <div className="flex items-center gap-3">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleSelectAll}
                    className="flex items-center gap-2 bg-transparent"
                  >
                    <Check className="h-4 w-4" />
                    {selectedShows.size === archivedShows.length ? "Deselect All" : "Select All"}
                  </Button>
                  <span className="text-sm text-muted-foreground">{selectedShows.size} selected</span>
                  {selectedShows.size > 0 && (
                    <>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={handleBulkUnarchive}
                        disabled={isBulkUnarchiving}
                      >
                        <RotateCcw className="h-4 w-4 mr-2" />
                        {isBulkUnarchiving ? "Unarchiving..." : "Unarchive Selected Shows"}
                      </Button>
                      <Button 
                        variant="destructive" 
                        size="sm" 
                        onClick={handleBulkDelete}
                        disabled={isBulkDeleting}
                      >
                        <Trash2 className="h-4 w-4 mr-2" />
                        {isBulkDeleting ? "Deleting..." : "Delete Selected Shows"}
                      </Button>
                    </>
                  )}
                </div>

                <div className="flex items-center gap-3">
                  <div className="text-xs text-muted-foreground hidden sm:block">
                    <span className="font-medium">{pageRangeStart}</span>–<span className="font-medium">{pageRangeEnd}</span> of{" "}
                    <span className="font-medium">{archivedShows.length}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm" onClick={gotoPrev} disabled={currentPage === 1}>
                      <ChevronLeft className="h-4 w-4" />
                    </Button>
                    <span className="text-sm">
                      Page {currentPage} of {totalPages}
                    </span>
                    <Button variant="outline" size="sm" onClick={gotoNext} disabled={currentPage === totalPages}>
                      <ChevronRight className="h-4 w-4" />
                    </Button>
                  </div>
                  <div className="flex items-center gap-1 border rounded-md">
                    <Button
                      variant={viewMode === "list" ? "default" : "ghost"}
                      size="sm"
                      onClick={() => setViewMode("list")}
                    >
                      <List className="h-4 w-4" />
                    </Button>
                    <Button
                      variant={viewMode === "cards" ? "default" : "ghost"}
                      size="sm"
                      onClick={() => setViewMode("cards")}
                    >
                      <Grid3X3 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {/* CARDS GRID */}
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {paginatedShows.map((show) => (
                <Card key={show.id} className="opacity-75">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center gap-2">
                        <Checkbox
                          checked={selectedShows.has(show.id)}
                          onCheckedChange={() => handleSelectShow(show.id)}
                        />
                        <div>
                          <h3 className="font-semibold">{show.title}</h3>
                          <p className="text-sm text-muted-foreground">
                            {show.media_type} • {show.show_type}
                          </p>
                        </div>
                      </div>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm">
                            <MoreVertical className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent>
                          <DropdownMenuItem onClick={() => handleViewShow(show)}>
                            <Eye className="h-4 w-4 mr-2" />
                            View
                          </DropdownMenuItem>
                          <DropdownMenuItem onClick={() => handleUnarchiveShow(show)}>
                            <RotateCcw className="h-4 w-4 mr-2" />
                            Unarchive
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            onClick={() => setDeletingShow(show)}
                            className="text-destructive"
                          >
                            <Trash2 className="h-4 w-4 mr-2" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-muted-foreground">Archived:</span>
                        <span>{show.archived_at ? new Date(show.archived_at).toLocaleDateString() : "Unknown"}</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-muted-foreground">Type:</span>
                        <Badge variant="outline">{show.show_type}</Badge>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-muted-foreground">Relationship:</span>
                        <span>{show.relationship_level}</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
            
            {/* BOTTOM TOOLBAR: Selection (left) + Pagination (right) */}
            {archivedShows.length > 0 && (
              <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between pt-4 rounded-lg mt-2">
                <div className="flex items-center gap-3">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleSelectAll}
                    className="flex items-center gap-2 bg-transparent"
                  >
                    <Check className="h-4 w-4" />
                    {selectedShows.size === archivedShows.length ? "Deselect All" : "Select All"}
                  </Button>
                  <span className="text-sm text-muted-foreground">{selectedShows.size} selected</span>
                  {selectedShows.size > 0 && (
                    <>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={handleBulkUnarchive}
                        disabled={isBulkUnarchiving}
                      >
                        <RotateCcw className="h-4 w-4 mr-2" />
                        {isBulkUnarchiving ? "Unarchiving..." : "Unarchive Selected Shows"}
                      </Button>
                      <Button 
                        variant="destructive" 
                        size="sm" 
                        onClick={handleBulkDelete}
                        disabled={isBulkDeleting}
                      >
                        <Trash2 className="h-4 w-4 mr-2" />
                        {isBulkDeleting ? "Deleting..." : "Delete Selected Shows"}
                      </Button>
                    </>
                  )}
                </div>

                <div className="flex items-center gap-3">
                  <div className="text-xs text-muted-foreground hidden sm:block">
                    <span className="font-medium">{pageRangeStart}</span>–<span className="font-medium">{pageRangeEnd}</span> of{" "}
                    <span className="font-medium">{archivedShows.length}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm" onClick={gotoPrev} disabled={currentPage === 1}>
                      <ChevronLeft className="h-4 w-4" />
                    </Button>
                    <span className="text-sm">
                      Page {currentPage} of {totalPages}
                    </span>
                    <Button variant="outline" size="sm" onClick={gotoNext} disabled={currentPage === totalPages}>
                      <ChevronRight className="h-4 w-4" />
                    </Button>
                  </div>
                  <div className="flex items-center gap-1 border rounded-md">
                    <Button
                      variant={viewMode === "list" ? "default" : "ghost"}
                      size="sm"
                      onClick={() => setViewMode("list")}
                    >
                      <List className="h-4 w-4" />
                    </Button>
                    <Button
                      variant={viewMode === "cards" ? "default" : "ghost"}
                      size="sm"
                      onClick={() => setViewMode("cards")}
                    >
                      <Grid3X3 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardContent className="p-6">
            {/* TOP TOOLBAR: Selection (left) + Pagination (right) */}
            {archivedShows.length > 0 && (
              <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between pb-4 rounded-lg mb-2">
                <div className="flex items-center gap-3">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleSelectAll}
                    className="flex items-center gap-2 bg-transparent"
                  >
                    <Check className="h-4 w-4" />
                    {selectedShows.size === archivedShows.length ? "Deselect All" : "Select All"}
                  </Button>
                  <span className="text-sm text-muted-foreground">{selectedShows.size} selected</span>
                  {selectedShows.size > 0 && (
                    <>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={handleBulkUnarchive}
                        disabled={isBulkUnarchiving}
                      >
                        <RotateCcw className="h-4 w-4 mr-2" />
                        {isBulkUnarchiving ? "Unarchiving..." : "Unarchive Selected Shows"}
                      </Button>
                      <Button 
                        variant="destructive" 
                        size="sm" 
                        onClick={handleBulkDelete}
                        disabled={isBulkDeleting}
                      >
                        <Trash2 className="h-4 w-4 mr-2" />
                        {isBulkDeleting ? "Deleting..." : "Delete Selected Shows"}
                      </Button>
                    </>
                  )}
                </div>

                <div className="flex items-center gap-3">
                  <div className="text-xs text-muted-foreground hidden sm:block">
                    <span className="font-medium">{pageRangeStart}</span>–<span className="font-medium">{pageRangeEnd}</span> of{" "}
                    <span className="font-medium">{archivedShows.length}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm" onClick={gotoPrev} disabled={currentPage === 1}>
                      <ChevronLeft className="h-4 w-4" />
                    </Button>
                    <span className="text-sm">
                      Page {currentPage} of {totalPages}
                    </span>
                    <Button variant="outline" size="sm" onClick={gotoNext} disabled={currentPage === totalPages}>
                      <ChevronRight className="h-4 w-4" />
                    </Button>
                  </div>
                  <div className="flex items-center gap-1 border rounded-md">
                    <Button
                      variant={viewMode === "list" ? "default" : "ghost"}
                      size="sm"
                      onClick={() => setViewMode("list")}
                    >
                      <List className="h-4 w-4" />
                    </Button>
                    <Button
                      variant={viewMode === "cards" ? "default" : "ghost"}
                      size="sm"
                      onClick={() => setViewMode("cards")}
                    >
                      <Grid3X3 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {/* TABLE */}
            <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-12">
                  <Checkbox
                    checked={selectedShows.size === archivedShows.length && archivedShows.length > 0}
                    onCheckedChange={handleSelectAll}
                  />
                </TableHead>
                <TableHead>
                  <Button variant="ghost" onClick={() => handleSort('name')} className="h-auto p-0 font-medium">
                    Show Name {getSortIcon('name')}
                  </Button>
                </TableHead>
                <TableHead>
                  <Button variant="ghost" onClick={() => handleSort('show_type')} className="h-auto p-0 font-medium">
                    Type {getSortIcon('show_type')}
                  </Button>
                </TableHead>
                <TableHead>Format</TableHead>
                <TableHead>Relationship</TableHead>
                <TableHead>Archived</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {paginatedShows.map((show) => (
                <TableRow key={show.id} className="opacity-75">
                  <TableCell>
                    <Checkbox
                      checked={selectedShows.has(show.id)}
                      onCheckedChange={() => handleSelectShow(show.id)}
                    />
                  </TableCell>
                  <TableCell>
                    <div>
                      <div className="font-medium">{show.title}</div>
                      <div className="text-sm text-muted-foreground">
                        {show.media_type} • {show.show_type}
                      </div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline">{show.show_type}</Badge>
                  </TableCell>
                  <TableCell>{show.media_type}</TableCell>
                  <TableCell>{show.relationship_level}</TableCell>
                  <TableCell>
                    <div className="text-sm text-muted-foreground">
                      {show.archived_at ? new Date(show.archived_at).toLocaleDateString() : "Unknown"}
                    </div>
                  </TableCell>
                  <TableCell className="text-right">
                    <div className="flex items-center justify-end gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        className="h-8 px-3 bg-transparent"
                        onClick={() => handleViewShow(show)}
                      >
                        <Eye className="h-4 w-4 mr-1" />
                        View
                      </Button>
                      {user?.role === "admin" && (
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="outline" size="sm" className="h-8 px-2 bg-transparent">
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuItem onClick={() => handleUnarchiveShow(show)}>
                              <RotateCcw className="h-4 w-4 mr-2" />
                              Unarchive
                            </DropdownMenuItem>
                            <DropdownMenuItem
                              className="text-red-600 focus:text-red-700"
                              onClick={() => handleDeleteShow(show)}
                            >
                              <Trash2 className="h-4 w-4 mr-2" />
                              Delete
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      )}
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
          
          {/* BOTTOM TOOLBAR: Selection (left) + Pagination (right) */}
          {archivedShows.length > 0 && (
            <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between pt-4 rounded-lg mt-2">
              <div className="flex items-center gap-3">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleSelectAll}
                  className="flex items-center gap-2 bg-transparent"
                >
                  <Check className="h-4 w-4" />
                  {selectedShows.size === archivedShows.length ? "Deselect All" : "Select All"}
                </Button>
                <span className="text-sm text-muted-foreground">{selectedShows.size} selected</span>
                {selectedShows.size > 0 && (
                  <>
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={handleBulkUnarchive}
                      disabled={isBulkUnarchiving}
                    >
                      <RotateCcw className="h-4 w-4 mr-2" />
                      {isBulkUnarchiving ? "Unarchiving..." : "Unarchive Selected Shows"}
                    </Button>
                    <Button 
                      variant="destructive" 
                      size="sm" 
                      onClick={handleBulkDelete}
                      disabled={isBulkDeleting}
                    >
                      <Trash2 className="h-4 w-4 mr-2" />
                      {isBulkDeleting ? "Deleting..." : "Delete Selected Shows"}
                    </Button>
                  </>
                )}
              </div>

              <div className="flex items-center gap-3">
                <div className="text-xs text-muted-foreground hidden sm:block">
                  <span className="font-medium">{pageRangeStart}</span>–<span className="font-medium">{pageRangeEnd}</span> of{" "}
                  <span className="font-medium">{archivedShows.length}</span>
                </div>
                <div className="flex items-center gap-2">
                  <Button variant="outline" size="sm" onClick={gotoPrev} disabled={currentPage === 1}>
                    <ChevronLeft className="h-4 w-4" />
                  </Button>
                  <span className="text-sm">
                    Page {currentPage} of {totalPages}
                  </span>
                  <Button variant="outline" size="sm" onClick={gotoNext} disabled={currentPage === totalPages}>
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </div>
                <div className="flex items-center gap-1 border rounded-md">
                  <Button
                    variant={viewMode === "list" ? "default" : "ghost"}
                    size="sm"
                    onClick={() => setViewMode("list")}
                  >
                    <List className="h-4 w-4" />
                  </Button>
                  <Button
                    variant={viewMode === "cards" ? "default" : "ghost"}
                    size="sm"
                    onClick={() => setViewMode("cards")}
                  >
                    <Grid3X3 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </div>
          )}
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardContent className="p-6">
            {/* TOP TOOLBAR: Selection (left) + Pagination (right) */}
            {archivedShows.length > 0 && (
              <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between pb-4 rounded-lg mb-2">
                <div className="flex items-center gap-3">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleSelectAll}
                    className="flex items-center gap-2 bg-transparent"
                  >
                    <Check className="h-4 w-4" />
                    {selectedShows.size === archivedShows.length ? "Deselect All" : "Select All"}
                  </Button>
                  <span className="text-sm text-muted-foreground">{selectedShows.size} selected</span>
                  {selectedShows.size > 0 && (
                    <>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={handleBulkUnarchive}
                        disabled={isBulkUnarchiving}
                      >
                        <RotateCcw className="h-4 w-4 mr-2" />
                        {isBulkUnarchiving ? "Unarchiving..." : "Unarchive Selected Shows"}
                      </Button>
                      <Button 
                        variant="destructive" 
                        size="sm" 
                        onClick={handleBulkDelete}
                        disabled={isBulkDeleting}
                      >
                        <Trash2 className="h-4 w-4 mr-2" />
                        {isBulkDeleting ? "Deleting..." : "Delete Selected Shows"}
                      </Button>
                    </>
                  )}
                </div>

                <div className="flex items-center gap-3">
                  <div className="text-xs text-muted-foreground hidden sm:block">
                    <span className="font-medium">{pageRangeStart}</span>–<span className="font-medium">{pageRangeEnd}</span> of{" "}
                    <span className="font-medium">{archivedShows.length}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm" onClick={gotoPrev} disabled={currentPage === 1}>
                      <ChevronLeft className="h-4 w-4" />
                    </Button>
                    <span className="text-sm">
                      Page {currentPage} of {totalPages}
                    </span>
                    <Button variant="outline" size="sm" onClick={gotoNext} disabled={currentPage === totalPages}>
                      <ChevronRight className="h-4 w-4" />
                    </Button>
                  </div>
                  <div className="flex items-center gap-1 border rounded-md">
                    <Button
                      variant={viewMode === "list" ? "default" : "ghost"}
                      size="sm"
                      onClick={() => setViewMode("list")}
                    >
                      <List className="h-4 w-4" />
                    </Button>
                    <Button
                      variant={viewMode === "cards" ? "default" : "ghost"}
                      size="sm"
                      onClick={() => setViewMode("cards")}
                    >
                      <Grid3X3 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {/* CARDS GRID */}
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {paginatedShows.map((show) => (
            <Card key={show.id} className="opacity-75">
              <CardContent className="p-6">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex items-center gap-2">
                    <Checkbox
                      checked={selectedShows.has(show.id)}
                      onCheckedChange={() => handleSelectShow(show.id)}
                    />
                    <div>
                      <h3 className="font-semibold">{show.title}</h3>
                      <p className="text-sm text-muted-foreground">
                        {show.media_type} • {show.show_type}
                      </p>
                    </div>
                  </div>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="sm">
                        <MoreVertical className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent>
                      <DropdownMenuItem onClick={() => handleViewShow(show)}>
                        <Eye className="h-4 w-4 mr-2" />
                        View
                      </DropdownMenuItem>
                      <DropdownMenuItem onClick={() => handleUnarchiveShow(show)}>
                        <RotateCcw className="h-4 w-4 mr-2" />
                        Unarchive
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        className="text-red-600 focus:text-red-700"
                        onClick={() => handleDeleteShow(show)}
                      >
                        <Trash2 className="h-4 w-4 mr-2" />
                        Delete
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
                
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-muted-foreground">Archived:</span>
                    <span>{show.archived_at ? new Date(show.archived_at).toLocaleDateString() : "Unknown"}</span>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-muted-foreground">Type:</span>
                    <Badge variant="outline">{show.show_type}</Badge>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-muted-foreground">Relationship:</span>
                    <span>{show.relationship_level}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
            </div>
            
            {/* BOTTOM TOOLBAR: Selection (left) + Pagination (right) */}
        {archivedShows.length > 0 && (
          <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between pt-4 rounded-lg mt-2">
            <div className="flex items-center gap-3">
              <Button
                variant="outline"
                size="sm"
                onClick={handleSelectAll}
                className="flex items-center gap-2 bg-transparent"
              >
                <Check className="h-4 w-4" />
                {selectedShows.size === archivedShows.length ? "Deselect All" : "Select All"}
              </Button>
              <span className="text-sm text-muted-foreground">{selectedShows.size} selected</span>
              {selectedShows.size > 0 && (
                <>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={handleBulkUnarchive}
                    disabled={isBulkUnarchiving}
                  >
                    <RotateCcw className="h-4 w-4 mr-2" />
                    {isBulkUnarchiving ? "Unarchiving..." : "Unarchive Selected Shows"}
                  </Button>
                  <Button 
                    variant="destructive" 
                    size="sm" 
                    onClick={handleBulkDelete}
                    disabled={isBulkDeleting}
                  >
                    <Trash2 className="h-4 w-4 mr-2" />
                    {isBulkDeleting ? "Deleting..." : "Delete Selected Shows"}
                  </Button>
                </>
              )}
            </div>

            <div className="flex items-center gap-3">
              <div className="text-xs text-muted-foreground hidden sm:block">
                <span className="font-medium">{pageRangeStart}</span>–<span className="font-medium">{pageRangeEnd}</span> of{" "}
                <span className="font-medium">{archivedShows.length}</span>
              </div>
              <div className="flex items-center gap-2">
                <Button variant="outline" size="sm" onClick={gotoPrev} disabled={currentPage === 1}>
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <span className="text-sm">
                  Page {currentPage} of {totalPages}
                </span>
                <Button variant="outline" size="sm" onClick={gotoNext} disabled={currentPage === totalPages}>
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
              <div className="flex items-center gap-1 border rounded-md">
                <Button
                  variant={viewMode === "list" ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setViewMode("list")}
                >
                  <List className="h-4 w-4" />
                </Button>
                <Button
                  variant={viewMode === "cards" ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setViewMode("cards")}
                >
                  <Grid3X3 className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>
        )}
          </CardContent>
        </Card>
      )}
      </div>

      {/* Dialogs */}
      <DeleteShowDialog
        open={!!deletingShow}
        onOpenChange={(open) => !open && setDeletingShow(null)}
        show={deletingShow}
        onShowDeleted={handleShowDeleted}
        deleteShow={async (showId: string) => {
          await apiClient.deletePodcast(showId)
          return true
        }}
      />
      <ShowViewDialog
        open={viewingShowIndex !== null}
        onOpenChange={(open) => !open && setViewingShowIndex(null)}
        show={viewingShow}
        onNavigate={handleNavigateDialog}
        hasNext={viewingShowIndex !== null && viewingShowIndex < archivedShows.length - 1}
        hasPrevious={viewingShowIndex !== null && viewingShowIndex > 0}
        onEdit={handleEditShow}
        onDelete={handleDeleteShow}
      />

      {/* Bulk Unarchive Confirmation Dialog */}
      <AlertDialog open={showBulkUnarchiveConfirm} onOpenChange={setShowBulkUnarchiveConfirm}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle className="flex items-center gap-2 text-orange-600">
              <RotateCcw className="h-5 w-5" />
              Unarchive Selected Shows
            </AlertDialogTitle>
            <AlertDialogDescription asChild>
              <div className="space-y-2">
                <p>Are you sure you want to unarchive {selectedShows.size} selected show{selectedShows.size > 1 ? 's' : ''}?</p>
                <p>This will move the shows back to the active shows page.</p>
              </div>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setShowBulkUnarchiveConfirm(false)}>
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction
              onClick={handleConfirmBulkUnarchive}
              disabled={isBulkUnarchiving}
              className="bg-orange-600 hover:bg-orange-700 focus:ring-orange-600"
            >
              <RotateCcw className="h-4 w-4 mr-2" />
              {isBulkUnarchiving ? "Unarchiving..." : `Unarchive ${selectedShows.size} Show${selectedShows.size > 1 ? 's' : ''}`}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Individual Unarchive Confirmation Dialog */}
      <AlertDialog open={showUnarchiveConfirm} onOpenChange={setShowUnarchiveConfirm}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle className="flex items-center gap-2 text-orange-600">
              <RotateCcw className="h-5 w-5" />
              Unarchive Show
            </AlertDialogTitle>
            <AlertDialogDescription asChild>
              <div className="space-y-2">
                <p>Are you sure you want to unarchive <strong>{showingUnarchiveShow?.title}</strong>?</p>
                <p>This will move the show back to the active shows page where it can be managed normally.</p>
              </div>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setShowUnarchiveConfirm(false)}>
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction
              onClick={handleConfirmUnarchiveShow}
              className="bg-orange-600 hover:bg-orange-700 focus:ring-orange-600"
            >
              <RotateCcw className="h-4 w-4 mr-2" />
              Unarchive Show
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Bulk Delete Confirmation Dialog */}
      <AlertDialog open={showBulkDeleteConfirm} onOpenChange={setShowBulkDeleteConfirm}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle className="flex items-center gap-2 text-red-600">
              <AlertTriangle className="h-5 w-5" />
              Delete Selected Shows
            </AlertDialogTitle>
            <AlertDialogDescription asChild>
              <div className="space-y-2">
                <p>Are you sure you want to delete {selectedShows.size} selected show{selectedShows.size > 1 ? 's' : ''}?</p>
                <p>This action cannot be undone and will permanently remove:</p>
                <ul className="ml-4 list-disc space-y-1">
                  <li>All show data and settings</li>
                  <li>Associated revenue records</li>
                  <li>Partner access permissions</li>
                  <li>Historical performance data</li>
                </ul>
              </div>
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setShowBulkDeleteConfirm(false)}>
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction
              onClick={handleConfirmBulkDelete}
              disabled={isBulkDeleting}
              className="bg-red-600 hover:bg-red-700 focus:ring-red-600"
            >
              <Trash2 className="h-4 w-4 mr-2" />
              {isBulkDeleting ? "Deleting..." : `Delete ${selectedShows.size} Show${selectedShows.size > 1 ? 's' : ''}`}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  )
}